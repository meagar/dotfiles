#!/usr/bin/env ruby -w
require 'thor'
require 'pry-byebug'

class Dev < Thor
  class_option :toxiproxy, desc: "Enable toxiproxy ports", aliases: "-t", type: :boolean, default: false
  class_option :compose, desc: "Run docker-compose up before starting the command", type: :boolean, default: true
  class_option :aws, desc: "Perform `aws sso login` if required", type: :boolean, default: true
  class_option :verbose, desc: "Extra verbose output", type: :boolean, default: false

  desc "auth", "Authenticate with AWS"
  def auth
    require 'open3'
    require 'webrick'
    require 'webrick/https'

    cert_name = [%w[CN localhost]]
    server = WEBrick::HTTPServer.new(
      Port: 8443,
      SSLEnable: true,
      SSLCertName: cert_name
    )

    Open3.popen3('aws sso login --profile tools') do |stdin, stdout, stderr, wait_thr|
      Thread.new do
        stdout.each_line do |line|

          puts line # Display output in real time

          line.chomp!
          if line.match(/\A[A-Z]{4}-[A-Z]{4}\z/)
            puts "Found server-side code #{line}, listening on 8080"


            server.mount_proc '/' do |req, res|
              res.body = line
            end

            trap 'INT' do
              puts "SIGINT"
              server.shutdown
            end

            server.start
          else
            puts "#{line} didn't match"
          end
          # You can also append to a variable or file here to capture it
          # captured_output << line
        end
      end

      Thread.new do
        stderr.each_line do |line|
          warn line # Display errors in real time
          # captured_errors << line
        end
      end

      exit_status = wait_thr.value
      puts "Process exited with status: #{exit_status.exitstatus}"
      puts "Stopping server"
      server.shutdown
    end
  end



  desc "web", "Start the Rails server via Foreman"
  option :concurrency, desc: "Run concurrent ruby processes", aliases: "-c", type: :numeric
  def web
    ENV['WEB_CONCURRENCY'] = options[:concurrency].to_s if options[:concurrency]
    run(foreman.fetch('web'))
  end

  desc "sidekiq", "Run Sidekiq via Foreman"
  def sidekiq(*args)
    run(foreman.fetch('runner0'))
  end

  desc "assets", "Run Shakapacker via Foreman"
  def assets
    run(foreman.fetch('shakapacker'))
  end

  desc "console", "Run a Rails console"
  def console
    run("./bin/rails c")
  end
  map 'c' => :console

  desc "redis PORT", "Connect to the given redis"
  def redis(port = "7001")
    run("redis-cli -p #{port.to_i}")
  end

  desc "runner COMMAND", "Rails runner"
  def runner(command)
    require 'shellwords'
    system("./bin/rails runner #{Shellwords.shellescape(command)}")
  end
  map 'r' => :runner

  desc "psql", "Open a PSQL shell"
  def psql
    run("./bin/rails db")
  end

  desc  "psql_logs", "Tail the Postgres container's logs"
  def psql_logs
    run("./bin/dc logs -f -n 3 pg_primary")
  end

  private

  def run(cmd)
    if options[:toxiproxy]
      puts "Enabling toxiproxy"
      ENV['SPECKEL_DB_PORT']='45432'
      ENV['SPECKEL_REDIS_STORE_PORT']='47001'
      ENV['SPECKEL_REDIS_QUEUE_PORT']='47002'
      ENV['SPECKEL_REDIS_SESSION_PORT']='47003'
      ENV['SPECKEL_REDIS_SIDEKIQ_PORT']='47004'
    end

    system('./bin/dc up -d') if options[:compose]

    system("./bin/aws_auth.sh") if options[:aws]

    system(cmd)
  end

  def foreman
    @foreman ||= File.open('Procfile.rails').each_line.reject { |line| line.match?(/\A\s*#/) }.map do |line|
      line.split(/\s*:\s+/, 2)
    end.to_h
  end
end

ENV['THOR_SILENCE_DEPRECATION'] = '1'
Dev.start(ARGV)

